EMPAQUETADOR : webpack - gulp - browserify

TRANSPIRADOR : babel



COMPONENTES :   Son funciones que arrancan con mayuscula y su principal funcion es muetran algo en pantalla usando
 su "return". Pueden recibir parametros (pros) pero siempre de componentes padre a componentes hijo. Siempre que un
 propcambie de valor tenemos un re-render. Pueden tener un estado(state) y si cambia el valor se re-renderizara. 
 Tienen un ciclo de vida (mount-unmount) y un ciclo de vida de actualizacion (update). 

Siempre tienen que arrancar en mayusculas

const App = () => {
    return "Hola mundo"
}

const App = () => "Hola mundo"

function App () {
    return "Hola mundo"
}

class App {}  ((NO SE USAN))

App()  <App/>  <App></App>






DESTRUCTURING:


const arr = [1,2,3] /////

const uno = arr[0]
const dos = arr[1]
const tres = arr[2]

const [uno,dos,tres] = arr


const obj = {x:1,y:2,z:3} /////

const uno = obj.x
const dos = obj:y
const tres = obj.z

const {x:uno,y:dos,z:tres} = obj
const {x:x,y:y,z:z} = obj
const {x,z} = obj



Class App extends Component{

    constructor(){}

    render(){}

    componentDiMount(){}

    componentWillUnmount(){}

    shouldComponentUpdate(){}

}

HOOKS: Son funciones que nos permiten adaptar un componente a nuestras necesidades.

- useState: Nos permite crear un estado.
- UseEffect: Nos permite ejecutar una funcion cuando el componente se monta.
- useContext
- useReducer
- useRef
- useMemo
- useCallback
- useImperativeHandle
- useLayoutEffect
- useDebugValue








Operaciones de Arrays

        .FOREACH

const arr = [1,2,3]
arr.forEach((a,b)=>{})

for(var i=0 ; i <arr.length ; i++){
    const item = arr[i]
}

arr.forEach()
Toma una funcion por valor. 
arr.forEach((item,i)=>{

})

        .MAP

//el map obligatoriamente necesita un return
arr.map((a,b)=>{})

const arr = [1,2,3]

const resultado = arr.map((item,i)=>{
    return item + 1
})
console.log(resultado) // [undefined,undefined,undefined]
const resultado = arr.map((item,i)=>{
    return item + 1
})
console.log(resultado) // [2,3,4]

        .OTROS

arr.filter()
arr.reduce()
arr.order()
arr.find()
arr.some()





IIFE Inmediatly InvokedFunction Expression - Funcion autoinvocada
Se escribe entre parentesis y se pone otro segundo par de parentesis
donde se escriben los parametros
return(
    {(fuction()=>{})()}
)
Modulo:




        KEY

const usuarios = [
    {
        nombre: "Juan",
        edad:20
    }
    {
        nombre: "Pedro",
        edad:30
    }
    {
        nombre: "Maria",
        edad:40
    }
]
usuarios.map((item,indice)=>{
    return <p key={indice}> {item.nombre} </p>
})
Si por alguna razon se borra un usuario las key de los demas usuarios
se reorganizaran con los valores de 0 a ...
Para evitar la desorganizacion se recomienda personalizar las key

const usuarios = [
    {
        id : 1,
        nombre: "Juan",
        edad:20
    }
    {
        id : 2,
        nombre: "Pedro",
        edad:30
    }
    {
        id : 3,
        nombre: "Maria",
        edad:40
    }
]
usuarios.map((item,indice)=>{
    return <p key={item.id}> {item.nombre} </p>
})





        AJAX
AJAX: Asinchronous JavaScript and XML
se debe conocer la ruta http de la computadora que se desea recolectar datos

        vieja       /     nuevas
XHR(XMKHttpRequest) / FETCH  - AXIOS 

HTTP(Stateless Protocol)


CLIENTE: nesesita saber
METODO - URL - VERSION (version http: normalmente esta ultima no hay que configurarla)
Me puede mandar:
HEADERS
BODY

VERSION : http/1.1 - La version instalada de http
Metodo/Verbo: La intencion del cliente con el servidor: 
                (get-post-put-patch-delete)
url: La url del recurso que queremos acceder


SERVIDOR: Responde con:
VERSION - STATUS - MENSAJE
Me puede mandar:
HEADERS
BODY


STATUS: Es un codigo numerico que nos indica el estado de la peticion
se separan en grupos:
100 - Codigos informativos
    101
200 - Codigos buenos
    200 (Mensaje: OK) - 201 (Mensaje: Creado)
300 - Redirecciones
    304 (Mensaje: No modificado)
400 - Errores de cliente
    404 (Mensaje: URL no existe) 
500 - Errores de servidor
    500 (Mensaje: Error interno del servidor)
Mensaje: Es un texto que le corresponde al status





        APIs
APIs: Son traductores de procesos
API REST: Representantion State Transfer/ Interfaz de transferencia de datos
API SOAP: Son APIs mas seguras.

FETCH Ejemplo: 
useEffect(()=>{
    const pedido = fetch("http/...")
    .then((res)=>{
        //console.log(res) una vez que vemos que este todo bien seguimos
        //transformamos lo que ricivimos en json con .json()
        return res.json()
    })
    .then((res)=>{ //continuo abajo
        console.log(res)
    })
    .catch(()=>{ //Si va todo bien no entrara enel catch
        console.log("Error)
    })
  },[])





        ENRRUTAMIENTO

librerias de React para ENRRUTAMIENTO (ReactRouter.com)
npm install react-router-dom (https://reactrouter.com/web/guides/quick-start)

ENRUTADOR:
    browserRouter: (Mas tipico - usa API de History)
    HashRouter: (Usa location.hash)
    MemoryRouter: Guarda las rutas en memoria
    StaticRouter: (Para servidores) SSR (Server Side REndering) 









